/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.LawOrder;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-02-06T21:34:28.028525Z[Etc/UTC]")

@Validated
@Api(value = "lawOrder", description = "the lawOrder API")
@VirtualService
public interface LawOrderApi {

    /**
     * DELETE /lawOrder/{lawOrderId}
     *
     * @param lawOrderId  (required)
     * @return OK (status code 200)
     *         or Internal Server Error (status code 500)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "deleteLawOrderLawOrderId", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/lawOrder/{lawOrderId}",
        method = RequestMethod.DELETE)
    <ResponseEntity<Void>> deleteLawOrderLawOrderId(@ApiParam(value = "",required=true) @PathVariable("lawOrderId") String lawOrderId, ServerWebExchange exchange);


    /**
     * GET /lawOrder/{lawOrderId} : Your GET endpoint
     *
     * @param lawOrderId  (required)
     * @return OK (status code 200)
     */
    @ApiVirtual
    @ApiOperation(value = "Your GET endpoint", nickname = "getLawOrderLawOrderId", notes = "", response = LawOrder.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LawOrder.class) })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/lawOrder/{lawOrderId}",
        produces = "application/json", 
        method = RequestMethod.GET)
    <ResponseEntity<LawOrder>> getLawOrderLawOrderId(@ApiParam(value = "",required=true) @PathVariable("lawOrderId") String lawOrderId, ServerWebExchange exchange);


    /**
     * GET /lawOrder : Your GET endpoint
     *
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     */
    @ApiVirtual
    @ApiOperation(value = "Your GET endpoint", nickname = "getSaasda", notes = "", response = LawOrder.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LawOrder.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/lawOrder",
        produces = "application/json", 
        method = RequestMethod.GET)
    <ResponseEntity<Flux<LawOrder>>> getSaasda(ServerWebExchange exchange);


    /**
     * POST /lawOrder
     *
     * @param lawOrder  (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "postLawOrder", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/lawOrder",
        consumes = "application/json",
        method = RequestMethod.POST)
    <ResponseEntity<Void>> postLawOrder(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Mono<LawOrder> lawOrder, ServerWebExchange exchange);


    /**
     * PUT /lawOrder
     *
     * @param lawOrder  (optional)
     * @return OK (status code 200)
     */
    @ApiVirtual
    @ApiOperation(value = "", nickname = "putLawOrder", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK") })
    @ApiImplicitParams({
    })
    @RequestMapping(value = "/lawOrder",
        consumes = "application/json",
        method = RequestMethod.PUT)
    <ResponseEntity<Void>> putLawOrder(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Mono<LawOrder> lawOrder, ServerWebExchange exchange);

}
